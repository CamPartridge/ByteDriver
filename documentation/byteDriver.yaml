openapi: 3.0.0
info:
  title: ByteDriver
  contact:
    email: 
      - eheil@student.neumont.edu 
      - cpartridge@student.neumont.edu
  version: 1.0.0
tags:
  - name: restaurantService
    description: Used for all things restaurant related
  - name: userService
    description: Operations for and about user
  - name: notificationService
    description: Used for notifying the user of transactions
  - name: orderService
    description: Used for placing orders at restaurants
  - name: cartService
    description: Used for creating a cart with items in it
paths:
  /restaurant:
    get:
      tags:
        - restaurantService
      summary: Get all restaurants
      responses:
        '200':
          description: Successful response
    post:
      tags:
        - restaurantService
      summary: Create a new restaurant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'
      responses:
        '201':
          description: Restaurant created successfully

  /restaurant/{restaurantName}:
    parameters:
      - $ref: '#/components/parameters/restaurantName'
    get:
      tags:
        - restaurantService
      summary: Get a restaurant by name
      responses:
        '200':
          description: Successful response

  /restaurant/{restaurantId}:
    parameters:
      - $ref: '#/components/parameters/restaurantId'
    get:
      tags: 
        - restaurantService
      summary: Get a restaurant by its ID
      responses:
        '200':
          description: Successful response
    put:
      tags:
        - restaurantService
      summary: Update a restaurant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'
      responses:
        '200':
          description: Restaurant updated successfully
    delete:
      tags:
        - restaurantService
      summary: Deletes a restaurant by its ID
      responses:
        '204':
          description: Restaurant deleted successfully

  /restaurant/{restaurantId}/menu:
    parameters:
      - $ref: '#/components/parameters/restaurantId'
    get:
      tags:
        - restaurantService
      summary: Get the menu from a restaurant by its ID
      responses:
        '200':
          description: Successful response
    post:
      tags:
        - restaurantService
      summary: Create a menu item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItem'
      responses:
        '201':
          description: Menu item created successfully
    put:
      tags:
        - restaurantService
      summary: Update a menu item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItem'
      responses:
        '200':
          description: Menu item updated successfully
    delete:
      tags:
        - restaurantService
      summary: Delete a menu item
      responses:
        '204':
          description: Menu item deleted successfully

    

  /user:
    get:
      tags:
        - userService
      summary: Reads all users
      description: Reads all users, no parameter needed
      operationId: getAllUsers
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad request to server
    post:
      tags:
        - userService
      summary: Add a user
      description: Add a new user
      operationId: addUser
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: Invalid input
  /user/{type}:
    get:
      tags:
        - userService
      summary: Gets all users with a certain type (byter/driver)
      description: Gets all users with the type in the parameter
      parameters:
        - name: type
          in: path
          description: Type to find
          required: true
          schema:
            type: string
      operationId: getUsersByType
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad request to server
  /user/{username}:
    get:
      tags:
        - userService
      summary: Get user by username
      description: Gets the user with the username in the parameter
      parameters:
        - name: username
          in: path
          description: Username to find
          required: true
          schema:
            type: string
      operationId: getUserByUsername
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad request to server
  /user/{userId}:
    parameters:
      - $ref: '#/components/parameters/userId'
    put:
      tags:
        - userService
      summary: Update a user
      description: Update a user by their ID
      operationId: updateUser
      requestBody:
        description: Update an existing user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID
        '404':
          description: User not found
    delete:
      tags:
        - userService
      summary: Delete a user
      description: Delete a user by their ID
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid user value
  /user/{userId}/changeType/{type}:
    put:
      tags:
        - userService
      summary: Update a user
      description: Update a user by their ID
      operationId: updateUserType
      parameters:
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: integer
        - name: type
          in: path
          description: User new type
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID
        '404':
          description: User not found
  /test:
    get:
      tags:
        - notificationService
      summary: Test to see if the Notification Service is up
      description: Sends text update if its running
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad request to server
  /getsubscriptions:
    get:
      tags:
        - notificationService
      summary: Gets the subscribed topics of the Notification service
      description: Sends array of all subscriptions
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
        '400':
          description: Bad request to server
  /order:
    get:
      tags:
        - orderService
      summary: Get all orders (probably for a restaurant)
      responses:
        '200':
          description: Successful response
    post:
      tags:
        - orderService
      summary: Create an order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully

  /order/{orderId}:
    parameters:
      - $ref: '#/components/parameters/orderId'
    get:
      tags:
        - orderService
      summary: Get order by ID
      responses:
        '200':
          description: Successful response
    put:
      tags:
        - orderService
      summary: Update an order (mainly used for changing status)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated successfully
    delete:
      tags:
        - orderService
      summary: Cancel an order
      responses:
        '204':
          description: Order canceled successfully
  /cart:
    get:
      tags:
        - cartService
      summary: Gets all carts (dev)
      description: Endpoint for testing purposes
      responses:
    post:
      tags:
        - cartService
      summary: Create a new Cart
      description: Creates a new Cart for the order to process
      responses:

  /cart/{cartId}:
    get:
      tags:
        - cartService
      summary: Gets all carts (dev)
      description: Endpoint for testing purposes
      parameters:
        - name: cartId
          in: path
          description: CartId to get
          required: true
          schema:
            $ref: '#/components/schemas/Cart'
      responses:
    put:
      tags:
        - cartService
      summary: Add items to existing cart
      description: adds items to cart with the id provided
      parameters:
        - name: cartId
          in: path
          description: CartId to get
          required: true
          schema:
            $ref: '#/components/schemas/Cart'
      responses:
    delete:
      tags:
        - cartService
      summary: delete cart
      description: adelete cart by id in parameter
      parameters:
        - name: cartId
          in: path
          description: CartId to delete
          required: true
          schema:
            $ref: '#/components/schemas/Cart'
      responses:
  /cart/{cartId}/{name}:
    delete:
      tags:
        - cartService
      summary: Add items to existing cart
      description: adds items to cart with the id provided
      parameters:
        - name: cartId
          in: path
          description: CartId to get
          required: true
          schema:
            $ref: '#/components/schemas/Cart'
        - name: name
          in: path
          description: menu item to remove
          required: true
          schema:
            $ref: '#/components/schemas/MenuItem/properties/name'
      responses:
components:
  parameters:
    restaurantName:
      name: restaurantName
      in: path
      description: Name of the restaurant to find
      required: true
      schema:
        type: string
    restaurantId:
      name: restaurantId
      in: path
      description: Id of the restaurant
      required: true
      schema:
        type: integer
    orderId:
      name: orderId
      in: path
      description: Id of an order
      required: true
      schema:
        type: integer
    
    userId:
      name: userId
      in: path
      description: ID of user to return
      required: true
      schema:
        type: integer
  schemas:
    Restaurant:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        location:
          type: string
        hours:
          type: string
        menu:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'
    MenuItem:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price: 
          type: number

    Order:
      type: object
      properties:
        id:
          type: integer
        menuItem:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'
        quantity:
          type: integer
    
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 24
        email:
          type: string
          example: email@email.com
        phone:
          type: integer
          example: 1234567890
        username:
          type: string
          example: Rick Harrison
        password:
          type: string
          example: B3st I c@n d0!
        address:
          type: string
          example: Ur Mom's house
        type:
          type: string
          example: byter
    Cart:
      type: object
      properties:
        cartId:
          type: integer
          format: int64
          example: 1001
        userId: 
          type: integer
          format: int64
          example: 24
        orderedItems:
          type: array
          items:
            application/json:
            schema:
              - $ref: '#/components/schemas/MenuItem'
              - quantity:
                  type: int64
                  example: 2